{"version":3,"sources":["utils/helpers.js","components/Nav/index.js","components/About/index.js","components/Modal/index.js","components/PhotoList/index.js","components/Gallery/index.js","components/Contact/index.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["capitalizeFirstLetter","string","charAt","toUpperCase","slice","Nav","props","categories","setCurrentCategory","currentCategory","contactSelected","setContactSelected","useEffect","document","title","name","className","data-testid","href","role","aria-label","onClick","map","category","About","id","src","style","width","alt","Modal","currentPhoto","onClose","description","index","type","PhotoList","useState","photos","setCurrentPhoto","currentPhotos","filter","photo","isModalOpen","setIsModalOpen","toggleModal","image","i","Gallery","ContactForm","email","message","formState","setFormState","errorMessage","setErrorMessage","handleChange","e","target","isValid","test","String","toLowerCase","validateEmail","value","console","log","length","onSubmit","preventDefault","htmlFor","defaultValue","onBlur","rows","App","Contact","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"8LAAO,SAASA,EAAsBC,GACpC,OAAOA,EAAOC,OAAO,GAAGC,cAAgBF,EAAOG,MAAM,G,WCiExCC,MA/Df,SAAaC,GAAQ,IAAD,EAOdA,EALFC,kBAFgB,MAEH,GAFG,EAGhBC,EAIEF,EAJFE,mBACAC,EAGEH,EAHFG,gBACAC,EAEEJ,EAFFI,gBACAC,EACEL,EADFK,mBAOF,OAJAC,qBAAU,WACRC,SAASC,MAAQd,EAAsBS,EAAgBM,QACtD,CAACN,IAGF,yBAAQO,UAAU,gBAAlB,UACE,6BACE,oBAAGC,cAAY,OAAOC,KAAK,IAA3B,UACE,uBAAMC,KAAK,MAAMC,aAAW,SAA5B,UACG,IADH,kBAGQ,IAJV,gBAQF,8BACE,qBAAIJ,UAAU,WAAd,UACE,oBAAIA,UAAU,OAAd,SACE,mBACEC,cAAY,QACZC,KAAK,SACLG,QAAS,kBAAMV,GAAmB,IAHpC,wBAQF,qBAAIK,UAAS,eAAUN,GAAmB,aAA1C,UACE,sBAAMW,QAAS,kBAAMV,GAAmB,IAAxC,qBAA8D,OAE/DJ,EAAWe,KAAI,SAACC,GAAD,OACd,oBACEP,UAAS,eACPP,EAAgBM,OAASQ,EAASR,OACjCL,GADD,aAFJ,SAQE,sBACEW,QAAS,WACPb,EAAmBe,GACnBZ,GAAmB,IAHvB,SAMGX,EAAsBuB,EAASR,SAR7BQ,EAASR,kBC/BbS,EAdD,WACZ,OACE,0BAASR,UAAU,OAAnB,UACE,oBAAIS,GAAG,QAAP,uBACA,qBACEC,IAAI,gCACJV,UAAU,OACVW,MAAO,CAAEC,MAAO,QAChBC,IAAI,c,OCUGC,MAnBf,YAA2C,IAA1BC,EAAyB,EAAzBA,aAAcC,EAAW,EAAXA,QACrBjB,EAAuCgB,EAAvChB,KAAMQ,EAAiCQ,EAAjCR,SAAUU,EAAuBF,EAAvBE,YAAaC,EAAUH,EAAVG,MACrC,OACE,qBAAKlB,UAAU,gBAAf,SACE,sBAAKA,UAAU,iBAAf,UACE,oBAAIA,UAAU,aAAd,SAA4BD,IAC5B,qBACEW,IAAG,wBAAmBH,EAAnB,YAA+BW,EAA/B,QACHL,IAAI,qBAEN,4BAAII,IACJ,wBAAQE,KAAK,SAASd,QAASW,EAA/B,oCC4IOI,MArJf,YAAkC,IAAbb,EAAY,EAAZA,SAAY,EACdc,mBAAS,CACxB,CACEtB,KAAM,gBACNQ,SAAU,aACVU,YACE,0EAEJ,CACElB,KAAM,gBACNQ,SAAU,aACVU,YACE,0EAEJ,CACElB,KAAM,oBACNQ,SAAU,aACVU,YACE,0EAEJ,CACElB,KAAM,mBACNQ,SAAU,aACVU,YACE,0EAEJ,CACElB,KAAM,gBACNQ,SAAU,aACVU,YACE,0EAEJ,CACElB,KAAM,iBACNQ,SAAU,YACVU,YACE,0EAEJ,CACElB,KAAM,eACNQ,SAAU,YACVU,YACE,0EAEJ,CACElB,KAAM,eACNQ,SAAU,YACVU,YACE,0EAEJ,CACElB,KAAM,YACNQ,SAAU,YACVU,YACE,0EAEJ,CACElB,KAAM,WACNQ,SAAU,OACVU,YACE,0EAEJ,CACElB,KAAM,UACNQ,SAAU,OACVU,YACE,0EAEJ,CACElB,KAAM,gBACNQ,SAAU,OACVU,YACE,0EAEJ,CACElB,KAAM,SACNQ,SAAU,OACVU,YACE,0EAEJ,CACElB,KAAM,aACNQ,SAAU,OACVU,YACE,0EAEJ,CACElB,KAAM,cACNQ,SAAU,YACVU,YACE,0EAEJ,CACElB,KAAM,QACNQ,SAAU,YACVU,YACE,0EAEJ,CACElB,KAAM,2BACNQ,SAAU,YACVU,YACE,0EAEJ,CACElB,KAAM,qBACNQ,SAAU,YACVU,YACE,0EAEJ,CACElB,KAAM,aACNQ,SAAU,YACVU,YACE,4EAjHCK,EADwB,sBAsHSD,qBAtHT,mBAsHxBN,EAtHwB,KAsHVQ,EAtHU,KAwHzBC,EAAgBF,EAAOG,QAAO,SAACC,GAAD,OAAWA,EAAMnB,WAAaA,KAxHnC,EA0HOc,oBAAS,GA1HhB,mBA0HxBM,EA1HwB,KA0HXC,EA1HW,KA4HzBC,EAAc,SAACC,EAAOC,GAC1BR,EAAgB,2BAAKO,GAAN,IAAaZ,MAAOa,KACnCH,GAAgBD,IAGlB,OACE,8BACE,sBAAK3B,UAAU,WAAf,UACG2B,GACC,cAAC,EAAD,CAAOZ,aAAcA,EAAcC,QAASa,IAE7CL,EAAclB,KAAI,SAACwB,EAAOC,GAAR,OACjB,qBACErB,IAAG,wBAAmBH,EAAnB,YAA+BwB,EAA/B,QACHlB,IAAKiB,EAAM/B,KACXC,UAAU,qBACVK,QAAS,kBAAMwB,EAAYC,EAAOC,KAC7BD,EAAM/B,eClIRiC,MAXf,YAAuC,IAApBvC,EAAmB,EAAnBA,gBACTM,EAAsBN,EAAtBM,KAAMkB,EAAgBxB,EAAhBwB,YACd,OACE,oCACE,oBAAIhB,cAAY,QAAhB,SAAyBjB,EAAsBe,KAC/C,4BAAIkB,IACJ,cAAC,EAAD,CAAWV,SAAUd,EAAgBM,W,OCgF5BkC,MAtFf,WAAwB,IAAD,EACaZ,mBAAS,CACzCtB,KAAM,GACNmC,MAAO,GACPC,QAAS,KAJU,mBACdC,EADc,KACHC,EADG,KAObtC,EAAyBqC,EAAzBrC,KAAMmC,EAAmBE,EAAnBF,MAAOC,EAAYC,EAAZD,QAPA,EASmBd,mBAAS,IAT5B,mBASdiB,EATc,KASAC,EATA,KAiBfC,EAAe,SAACC,GACpB,GAAsB,UAAlBA,EAAEC,OAAO3C,KAAkB,CAC7B,IAAM4C,ENnBL,SAAuBT,GAE5B,MADS,wJACCU,KAAKC,OAAOX,GAAOY,eMiBTC,CAAcN,EAAEC,OAAOM,OACvCC,QAAQC,IAAIP,GAIVJ,EAHGI,EAGa,GAFA,8BAKbF,EAAEC,OAAOM,MAAMG,OAGlBZ,EAAgB,IAFhBA,EAAgB,GAAD,OAAIE,EAAEC,OAAO3C,KAAb,iBAKduC,GACHD,EAAa,2BAAKD,GAAN,kBAAkBK,EAAEC,OAAO3C,KAAO0C,EAAEC,OAAOM,UAS3D,OACE,oCACE,oBAAI/C,cAAY,QAAhB,wBAEA,uBAAMQ,GAAG,eAAe2C,SATP,SAACX,GACpBA,EAAEY,iBACFJ,QAAQC,IAAId,IAOV,UACE,gCACE,uBAAOkB,QAAQ,OAAf,kBACA,uBACEnC,KAAK,OACLoC,aAAcxD,EACdyD,OAAQhB,EACRzC,KAAK,YAGT,gCACE,uBAAOuD,QAAQ,QAAf,4BACA,uBACEnC,KAAK,QACLoC,aAAcrB,EACdsB,OAAQhB,EACRzC,KAAK,aAGT,gCACE,uBAAOuD,QAAQ,UAAf,sBACA,0BACEvD,KAAK,UACLwD,aAAcpB,EACdqB,OAAQhB,EACRiB,KAAK,SAGRnB,GACC,8BACE,mBAAGtC,UAAU,aAAb,SAA2BsC,MAG/B,wBAAQnB,KAAK,SAASlB,cAAY,MAAlC,2BCpCOyD,MA1Cf,WAAgB,IAAD,EACQrC,mBAAS,CAC5B,CACEtB,KAAM,aACNkB,YACE,wEAEJ,CAAElB,KAAM,YAAakB,YAAa,kCAClC,CAAElB,KAAM,OAAQkB,YAAa,wBAC7B,CACElB,KAAM,YACNkB,YAAa,8DAVV1B,EADM,sBAeiC8B,mBAAS9B,EAAW,IAfrD,mBAeNE,EAfM,KAeWD,EAfX,OAiBiC6B,oBAAS,GAjB1C,mBAiBN3B,EAjBM,KAiBWC,EAjBX,KAmBb,OACE,gCACE,cAAC,EAAD,CACEJ,WAAYA,EACZC,mBAAoBA,EACpBC,gBAAiBA,EACjBC,gBAAiBA,EACjBC,mBAAoBA,IAEtB,+BACID,EAMA,cAACiE,EAAD,IALA,qCACE,cAAC,EAAD,CAASlE,gBAAiBA,IAC1B,cAAC,EAAD,aC1BQmE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCjBnC,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF/E,SAASgF,eAAe,SFoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBZ,MAAK,SAACa,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNnC,QAAQmC,MAAMA,EAAMjD,YE/G5B8B,M","file":"static/js/main.9a65f7e8.chunk.js","sourcesContent":["export function capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nexport function validateEmail(email) {\n  var re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(String(email).toLowerCase());\n}","import React, { useEffect } from \"react\";\nimport { capitalizeFirstLetter } from \"../../utils/helpers\";\n\nfunction Nav(props) {\n  const {\n    categories = [],\n    setCurrentCategory,\n    currentCategory,\n    contactSelected,\n    setContactSelected,\n  } = props;\n\n  useEffect(() => {\n    document.title = capitalizeFirstLetter(currentCategory.name);\n  }, [currentCategory]);\n\n  return (\n    <header className=\"flex-row px-1\">\n      <h2>\n        <a data-testid=\"link\" href=\"/\">\n          <span role=\"img\" aria-label=\"camera\">\n            {\" \"}\n            ðŸ“¸\n          </span>{\" \"}\n          Oh Snap!\n        </a>\n      </h2>\n      <nav>\n        <ul className=\"flex-row\">\n          <li className=\"mx-2\">\n            <a\n              data-testid=\"about\"\n              href=\"#about\"\n              onClick={() => setContactSelected(false)}\n            >\n              About me\n            </a>\n          </li>\n          <li className={`mx-2 ${contactSelected && \"navActive\"}`}>\n            <span onClick={() => setContactSelected(true)}>Contact</span>{\" \"}\n          </li>\n          {categories.map((category) => (\n            <li\n              className={`mx-1 ${\n                currentCategory.name === category.name &&\n                !contactSelected &&\n                `navActive`\n              }`}\n              key={category.name}\n            >\n              <span\n                onClick={() => {\n                  setCurrentCategory(category);\n                  setContactSelected(false);\n                }}\n              >\n                {capitalizeFirstLetter(category.name)}\n              </span>\n            </li>\n          ))}\n        </ul>\n      </nav>\n    </header>\n  );\n}\n\nexport default Nav;\n","import React from \"react\";\n\n// React components must always return a single parent JSX element. However, this element may have many children elements.\nconst About = () => {\n  return (\n    <section className=\"my-5\">\n      <h1 id=\"about\">Who am I?</h1>\n      <img\n        src='/assets/cover/cover-image.jpg'\n        className=\"my-2\"\n        style={{ width: \"100%\" }}\n        alt=\"cover\"\n      />\n    </section>\n  );\n};\n\nexport default About;\n","import React from \"react\";\n\nfunction Modal({ currentPhoto, onClose }) {\n  const { name, category, description, index } = currentPhoto;\n  return (\n    <div className=\"modalBackdrop\">\n      <div className=\"modalContainer\">\n        <h3 className=\"modalTitle\">{name}</h3>\n        <img\n          src={`/assets/large/${category}/${index}.jpg`}\n          alt=\"current category\"\n        />\n        <p>{description}</p>\n        <button type=\"button\" onClick={onClose}>\n          Close this modal\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default Modal;\n","import React, { useState } from \"react\";\n\nimport Modal from \"../Modal\";\n\nfunction PhotoList({ category }) {\n  const [photos] = useState([\n    {\n      name: \"Grocery aisle\",\n      category: \"commercial\",\n      description:\n        \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc ultricie\",\n    },\n    {\n      name: \"Grocery booth\",\n      category: \"commercial\",\n      description:\n        \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc ultricie\",\n    },\n    {\n      name: \"Building exterior\",\n      category: \"commercial\",\n      description:\n        \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc ultricie\",\n    },\n    {\n      name: \"Restaurant table\",\n      category: \"commercial\",\n      description:\n        \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc ultricie\",\n    },\n    {\n      name: \"Cafe interior\",\n      category: \"commercial\",\n      description:\n        \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc ultricie\",\n    },\n    {\n      name: \"Cat green eyes\",\n      category: \"portraits\",\n      description:\n        \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc ultricie\",\n    },\n    {\n      name: \"Green parrot\",\n      category: \"portraits\",\n      description:\n        \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc ultricie\",\n    },\n    {\n      name: \"Yellow macaw\",\n      category: \"portraits\",\n      description:\n        \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc ultricie\",\n    },\n    {\n      name: \"Pug smile\",\n      category: \"portraits\",\n      description:\n        \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc ultricie\",\n    },\n    {\n      name: \"Pancakes\",\n      category: \"food\",\n      description:\n        \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc ultricie\",\n    },\n    {\n      name: \"Burrito\",\n      category: \"food\",\n      description:\n        \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc ultricie\",\n    },\n    {\n      name: \"Scallop pasta\",\n      category: \"food\",\n      description:\n        \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc ultricie\",\n    },\n    {\n      name: \"Burger\",\n      category: \"food\",\n      description:\n        \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc ultricie\",\n    },\n    {\n      name: \"Fruit bowl\",\n      category: \"food\",\n      description:\n        \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc ultricie\",\n    },\n    {\n      name: \"Green river\",\n      category: \"landscape\",\n      description:\n        \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc ultricie\",\n    },\n    {\n      name: \"Docks\",\n      category: \"landscape\",\n      description:\n        \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc ultricie\",\n    },\n    {\n      name: \"Panoramic village by sea\",\n      category: \"landscape\",\n      description:\n        \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc ultricie\",\n    },\n    {\n      name: \"Domestic landscape\",\n      category: \"landscape\",\n      description:\n        \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc ultricie\",\n    },\n    {\n      name: \"Park bench\",\n      category: \"landscape\",\n      description:\n        \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc ultricie\",\n    },\n  ]);\n\n  const [currentPhoto, setCurrentPhoto] = useState();\n\n  const currentPhotos = photos.filter((photo) => photo.category === category);\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const toggleModal = (image, i) => {\n    setCurrentPhoto({ ...image, index: i });\n    setIsModalOpen(!isModalOpen);\n  };\n\n  return (\n    <div>\n      <div className=\"flex-row\">\n        {isModalOpen && (\n          <Modal currentPhoto={currentPhoto} onClose={toggleModal} />\n        )}\n        {currentPhotos.map((image, i) => (\n          <img\n            src={`/assets/small/${category}/${i}.jpg`}\n            alt={image.name}\n            className=\"img-thumbnail mx-1\"\n            onClick={() => toggleModal(image, i)}\n            key={image.name}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default PhotoList;\n","import React from \"react\";\nimport PhotoList from \"../PhotoList\";\nimport { capitalizeFirstLetter } from \"../../utils/helpers\";\n\nfunction Gallery({ currentCategory }) {\n  const { name, description } = currentCategory;\n  return (\n    <section>\n      <h1 data-testid=\"h1tag\">{capitalizeFirstLetter(name)}</h1>\n      <p>{description}</p>\n      <PhotoList category={currentCategory.name}/>\n    </section>\n  );\n}\n\nexport default Gallery;\n","import React, { useState } from \"react\";\n\nimport { validateEmail } from \"../../utils/helpers\";\n\nfunction ContactForm() {\n  const [formState, setFormState] = useState({\n    name: \"\",\n    email: \"\",\n    message: \"\",\n  });\n\n  const { name, email, message } = formState;\n\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  // we're using the setFormState function to update the formState value\n  // for the name property. We assign the value taken from the input field in the UI with e.target.value\n  // and assign this value to the property formState.name.\n  // We use the spread operator, ...formState,\n  // so we can retain the other key-value pairs in this object.\n  // Without the spread operator, the formState object would be overwritten to only contain the name: value key pair.\n  const handleChange = (e) => {\n    if (e.target.name === \"email\") {\n      const isValid = validateEmail(e.target.value);\n      console.log(isValid);\n      if (!isValid) {\n        setErrorMessage(\"Your email is invalid\");\n      } else {\n        setErrorMessage(\"\");\n      }\n    } else {\n      if (!e.target.value.length) {\n        setErrorMessage(`${e.target.name} is required`);\n      } else {\n        setErrorMessage(\"\");\n      }\n    }\n    if (!errorMessage) {\n      setFormState({ ...formState, [e.target.name]: e.target.value });\n    }\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    console.log(formState);\n  };\n\n  return (\n    <section>\n      <h1 data-testid=\"h1tag\">Contact me</h1>\n      {/* <h1>Contact me</h1> */}\n      <form id=\"contact-form\" onSubmit={handleSubmit}>\n        <div>\n          <label htmlFor=\"name\">Name</label>\n          <input\n            type=\"text\"\n            defaultValue={name}\n            onBlur={handleChange}\n            name=\"name\"\n          />\n        </div>\n        <div>\n          <label htmlFor=\"email\">Email address:</label>\n          <input\n            type=\"email\"\n            defaultValue={email}\n            onBlur={handleChange}\n            name=\"email\"\n          />\n        </div>\n        <div>\n          <label htmlFor=\"message\">Message:</label>\n          <textarea\n            name=\"message\"\n            defaultValue={message}\n            onBlur={handleChange}\n            rows=\"5\"\n          />\n        </div>\n        {errorMessage && (\n          <div>\n            <p className=\"error-text\">{errorMessage}</p>\n          </div>\n        )}\n        <button type=\"submit\" data-testid=\"btn\">Submit</button>\n      </form>\n    </section>\n  );\n}\n\nexport default ContactForm;\n","import React, { useState } from \"react\";\nimport Nav from \"./components/Nav\";\nimport About from \"./components/About\";\nimport Gallery from \"./components/Gallery\";\nimport ContactForm from \"./components/Contact\";\n\nfunction App() {\n  const [categories] = useState([\n    {\n      name: \"commercial\",\n      description:\n        \"Photos of grocery stores, food trucks, and other commercial projects\",\n    },\n    { name: \"portraits\", description: \"Portraits of people in my life\" },\n    { name: \"food\", description: \"Delicious delicacies\" },\n    {\n      name: \"landscape\",\n      description: \"Fields, farmhouses, waterfalls, and the beauty of nature\",\n    },\n  ]);\n\n  const [currentCategory, setCurrentCategory] = useState(categories[0]);\n\n  const [contactSelected, setContactSelected] = useState(false);\n\n  return (\n    <div>\n      <Nav\n        categories={categories}\n        setCurrentCategory={setCurrentCategory}\n        currentCategory={currentCategory}\n        contactSelected={contactSelected}\n        setContactSelected={setContactSelected}\n      ></Nav>\n      <main>\n        {!contactSelected ? (\n          <>\n            <Gallery currentCategory={currentCategory}></Gallery>\n            <About></About>\n          </>\n        ) : (\n          <ContactForm></ContactForm>\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}